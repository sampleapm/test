{
	"info": {
		"_postman_id": "db8b98e8-22aa-433d-9b92-d9762a6173bd",
		"name": "Response validation",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "41318006"
	},
	"item": [
		{
			"name": "Create Data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"\r",
							"\r",
							"pm.test(\"status code is 201\",()=>{\r",
							"    pm.response.to.have.status(201)\r",
							"})\r",
							"\r",
							"pm.test(\"status code is Created\",()=>{\r",
							"    pm.response.to.have.status(\"Created\")\r",
							"})\r",
							"pm.test(\"status code is 200 or 201\",()=>{\r",
							"    pm.expect(pm.response.code).to.be.oneOf([201,200])\r",
							"})\r",
							"\r",
							"pm.test(\"Header is present\",()=>{\r",
							"    pm.response.to.have.header(\"Content-Type\")\r",
							"})\r",
							"\r",
							"pm.test(\"Header value is present\",()=>{\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")\r",
							"})\r",
							"\r",
							"pm.test(\"data is present\",()=>{\r",
							"    var jsonData=pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(pm.collectionVariables.get(\"name\"))\r",
							"})\r",
							"\r",
							"\r",
							"pm.test(\"text is present\",()=>{\r",
							"    var jsonData=pm.response.text()\r",
							"    pm.expect(jsonData).to.include(\"i\")\r",
							"})\r",
							"\r",
							"pm.test(\"property is present\",()=>{\r",
							"    var jsonData=pm.response.json()\r",
							"    pm.expect(jsonData).to.have.property(\"id\")\r",
							"    pm.expect(jsonData).to.have.property(\"name\")\r",
							"})\r",
							"\r",
							"pm.test(\"Cookies is present\",()=>{\r",
							"    pm.expect(pm.cookies.has(\"sd\")).to.be.false;\r",
							"})\r",
							"\r",
							"pm.test(\"Time is above 1\",()=>{\r",
							"    pm.expect(pm.response.responseTime).to.be.above(1)\r",
							"})\r",
							"pm.test(\"Time is below 20\",()=>{\r",
							"    pm.expect(pm.response.responseTime).to.be.below(100)\r",
							"})\r",
							"/*pm.test(\"Cookies value is present\",()=>{\r",
							"    pm.expect(pm.cookies.get(\"sd\")).to.eql(2)\r",
							"})*/\r",
							"\r",
							"\r",
							"/*jsonData.forEach(jsonData=>{   })*/\r",
							"pm.test(\"Validating datatype for object\",()=>{\r",
							"    var jsonData=pm.response.json()\r",
							"    pm.expect(jsonData).to.be.an(\"object\")\r",
							"    pm.expect(jsonData.id).to.be.an(\"string\")\r",
							"    pm.expect(jsonData.name).to.be.a(\"string\")\r",
							"    pm.expect(jsonData.married).to.be.a(\"boolean\")\r",
							"    pm.expect(jsonData.phone).to.be.an(\"array\")\r",
							"    pm.expect(jsonData.phone[0]).to.be.a(\"number\")\r",
							"     pm.expect(jsonData.email).to.be.a(\"string\")\r",
							"})\r",
							"\r",
							"\r",
							"var jsonData=pm.response.json()\r",
							"pm.test(\"Capturing id\",()=>{\r",
							"    pm.collectionVariables.set(\"id\", jsonData.id)\r",
							"})\r",
							"\r",
							"pm.test(\"Validating json field for object\",()=>{\r",
							"    var jsonData=pm.response.json()\r",
							"    pm.expect(jsonData.id).to.eql(pm.collectionVariables.get(\"id\"))\r",
							"    pm.expect(jsonData.name).to.eql(pm.collectionVariables.get(\"name\"))\r",
							"    pm.expect(jsonData.married).to.eql(false)\r",
							"    pm.expect(jsonData.phone).to.have.members([123,3456])\r",
							"    pm.expect(jsonData.email).to.eql(pm.collectionVariables.get(\"email\"))\r",
							"})\r",
							"\r",
							"console.log(\"success\",jsonData);\r",
							"\r",
							"\r",
							"if(pm.response.code===201){\r",
							"   pm.execution.setNextRequest(\"all employees\");\r",
							"}else{\r",
							"   pm.execution.setNextRequest(null);\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var json=Math.random().toString(36).substring(2)\r",
							"var bro=Math.random().toString(36).replace(/[0-9]/g,'').substring(2,12)\r",
							"var name=\"Adarsh\"+bro;\r",
							"var email=\"Adarsh\"+json+\"@gmail.com\"\r",
							"\r",
							"pm.collectionVariables.set(\"name\", name)\r",
							"pm.collectionVariables.set(\"email\", email)"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "    {\r\n      \"name\":\"{{name}}\",\r\n      \"married\": false,\r\n      \"phone\": [\r\n        123,\r\n        3456\r\n      ],\r\n      \"email\": \"{{email}}\"\r\n    }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/stud",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"stud"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/stud/{{id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"stud",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "all employees",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData=pm.response.json()\r",
							"if(pm.response.code===200){\r",
							"   pm.execution.setNextRequest(\"Update Data\");\r",
							"}else{\r",
							"   pm.execution.setNextRequest(null);\r",
							"   console.log(jsonData)\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/stud",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"stud"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if(pm.response.code===200){\r",
							"   pm.execution.setNextRequest(\"Delete data\");\r",
							"}else{\r",
							"   pm.execution.setNextRequest(null);\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n      \"name\": \"baaaaaa\",\r\n      \"married\": false,\r\n      \"course\": [\r\n        \"dhhdh\",\r\n        \"hghdd\"\r\n      ],\r\n      \"adress\": null\r\n    }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/stud/{{id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"stud",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if(pm.response.code===200){\r",
							"   pm.execution.setNextRequest(null);\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/stud/{{id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"stud",
						"{{id}}"
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "id",
			"value": ""
		},
		{
			"key": "name",
			"value": ""
		},
		{
			"key": "email",
			"value": ""
		}
	]
}